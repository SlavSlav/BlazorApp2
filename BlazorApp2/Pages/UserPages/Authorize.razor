@page "/authorize"
<h3>AUTORIZE</h3>

@if (User != null)
{
    <div>
        <p>@User.Account.FirstName</p>
        <p>@User.Money</p>
        <button @onclick="AccountOut">Out</button>
    </div>
    @foreach (var order in User.GameOrders)
    {
        <GameComponents Game="order.Game"></GameComponents>
    }
}
else
{
    <EditForm Model="Account" OnSubmit="OnSubmit">
        <div>
            <label>Email</label>
            <input @bind-value="Account.Email" />
        </div>
        <div>
            <label>Password</label>
            <input @bind-value="Account.Password" />
        </div>
        <button type="submit">Send</button>

    </EditForm>
}

@* <AuthorizeView>
    <Authorized>
        <div>
            <p>@User.Account.FirstName</p>
            <p>@User.Money</p>
            <button @onclick="AccountOut">Out</button>
        </div>

        @foreach (var order in User.GameOrders)
        {
            <GameComponents Game="order.Game"></GameComponents>
        }
    </Authorized>
    <NotAuthorized>
  @*       <EditForm Model="Account" OnSubmit="OnSubmit">
            <div>
                <label>Email</label>
                <input @bind-value="Account.Email" />
            </div>
            <div>
                <label>Password</label>
                <input @bind-value="Account.Password" />
            </div>

            <button type="submit">Send</button>

        </EditForm> *
    </NotAuthorized>
   
</AuthorizeView> *@

    <p>----------------------------------</p>
    @foreach (var game in ShowGames)    
    {
    <GameComponents Game="game"></GameComponents>
    }



@code {
    public AccountModel Account { get; set; }
    public static UserModel? User { get; set; }

    public List<GameModel> AllGames { get; set; }
    public List<GameModel> ShowGames { get; set; }


    public Authorize ()
    {
        AllGames = new List<GameModel>();
        ShowGames = new List<GameModel>();
        Account = new AccountModel()
        {
                Email = "bisnesbrend@gmail.com",
                FirstName = "Vladislav",
                LastName = "Cherkis",
                Phone = "0977258244",
                Password = "123321"
        };
    }

    protected override async Task OnInitializedAsync()
    {
        using(EntityDataBase db = new EntityDataBase())
        {        
            AllGames = db.Games.ToList();
            ShowGames = AllGames;
        }
    }

    public void OnSubmit(EditContext editContext)
    {
        var valid = editContext.Validate();

        using (EntityDataBase db = new EntityDataBase())
        {
            var account = db.Accounts
            .Include(a=> a.User)
                .ThenInclude(u => u.GameOrders)
                    .ThenInclude(o => o.Game)
            .FirstOrDefault(a => 
                a.Email == Account.Email &&
                a.Password == Account.Password);

            if (account == null)
                return;

            User = account.User; 
            var userGames = from order in User.GameOrders
                            from game in AllGames
                            where order.Game.Id == game.Id
                            select game;

            ShowGames = AllGames.Except(userGames).ToList();
        };
    }

    public void AccountOut()
    {
        User = null;
        Account = new AccountModel();
        ShowGames = AllGames;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        
    }
}
