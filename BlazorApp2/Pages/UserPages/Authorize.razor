@page "/authorize"
<h3>AUTORIZE</h3>

<AuthorizeView>
    <Authorized>
        <div>
            <p>@User.Account.FirstName</p>
            <p>@User.Money</p>
            <button @onclick="AccountOut">Out</button>
        </div>

        @foreach (var order in User.GameOrders)
        {
            <GameComponents Game="order.Game"></GameComponents>
        }
    </Authorized>
    <NotAuthorized>
  @*       <EditForm Model="Account" OnSubmit="OnSubmit">
            <div>
                <label>Email</label>
                <input @bind-value="Account.Email" />
            </div>
            <div>
                <label>Password</label>
                <input @bind-value="Account.Password" />
            </div>

            <button type="submit">Send</button>

        </EditForm> *@
    </NotAuthorized>
   
</AuthorizeView>

   @*  @if (User != null)
    {
        <div>
            <p>@User.Account.FirstName</p>
            <p>@User.Money</p>
            <button @onclick="AccountOut">Out</button>
        </div>
        @foreach (var order in User.GameOrders)
        {
            <GameComponents Game="order.Game"></GameComponents>
        }
    }   
    else
    {
        <EditForm Model="Account" OnSubmit="OnSubmit">
            <div>
                <label>Email</label>
                <input @bind-value="Account.Email" />
            </div>
            <div>
                <label>Password</label>
                <input @bind-value="Account.Password" />
            </div>
            <button type="submit">Send</button>

    </EditForm>        
    } *@

    <GameComponents Game ="new GameModel()
    {
        Id = Guid.NewGuid()

    }"></GameComponents>



@code {
    public AccountModel Account { get; set; }
    public static UserModel? User { get; set; }

    public List<GameModel> Games { get; set; }


    public Authorize ()
    {
        Games = new List<GameModel>();
        Account = new AccountModel()
        {
                Email = "bisnesbrend@gmail.com",
                FirstName = "Vladislav",
                LastName = "Cherkis",
                Phone = "0977258244",
                Password = "123321"
        };
    }

    protected override async Task OnInitializedAsync()
    {
        using(EntityDataBase db = new EntityDataBase())
        {        
            Games = db.Games.ToList();
        }
    }

    public void OnSubmit(EditContext editContext)
    {
        var valid = editContext.Validate();

        using (EntityDataBase db = new EntityDataBase())
        {
            var account = db.Accounts.FirstOrDefault(a => 
                a.Email == Account.Email &&
                a.Password == Account.Password);

            if (account == null)
                return;

            User = account.User;
            var userGames = from order in User.GameOrders
                            select order.Game;
            var games = db.Games.ToList();
            Games = games.Except(userGames).ToList();
        };
    }

    public void AccountOut()
    {
        User = null;
        Account = new AccountModel();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        
    }
}
